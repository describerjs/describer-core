@model string

@{
	// Kein Layout benutzen
	Layout = null;
	// MIME-Type setzen
	Response.ContentType = "application/javascript";
}

@*////////////////////////////////////////////////////////////
// In diesem View wird die MainJS anhand der übergebenen Version
// und den in der Webconfig festgelegten Feature/Performanceeinstellungen
// dynamisch erzeugt.
////////////////////////////////////////////////////////////*@

window.mainjsversion = '@Model';
window.mainjs_domin = '@ApplicationConfiguration.SiteConfig.Server.PrimaryDomain';
window.mainjs_features = [];

@if (Html.FeatureEnabled(PerformanceFeature.AriaRoles))
{
	<text>window.mainjs_features.push("@PerformanceFeature.AriaRoles")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.Favicons))
{
	<text>window.mainjs_features.push("@PerformanceFeature.Favicons")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.IE8))
{
	<text>window.mainjs_features.push("@PerformanceFeature.IE8")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.MicroData))
{
	<text>window.mainjs_features.push("@PerformanceFeature.MicroData")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.MicroFormats))
{
	<text>window.mainjs_features.push("@PerformanceFeature.MicroFormats")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.NoJS))
{
	<text>window.mainjs_features.push("@PerformanceFeature.NoJS")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.PerformanceA))
{
	<text>window.mainjs_features.push("@PerformanceFeature.PerformanceA")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.PerformanceB))
{
	<text>window.mainjs_features.push("@PerformanceFeature.PerformanceB")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.PerformanceC))
{
	<text>window.mainjs_features.push("@PerformanceFeature.PerformanceC")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.Prefetch))
{
	<text>window.mainjs_features.push("@PerformanceFeature.Prefetch")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.ProgressiveEnhancement))
{
	<text>window.mainjs_features.push("@PerformanceFeature.ProgressiveEnhancement")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.ResponsiveImages))
{
	<text>window.mainjs_features.push("@PerformanceFeature.ResponsiveImages")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.SpriteSheets))
{
	<text>window.mainjs_features.push("@PerformanceFeature.SpriteSheets")</text>
}
@if (Html.FeatureEnabled(PerformanceFeature.TouchSupport))
{
	<text>window.mainjs_features.push("@PerformanceFeature.TouchSupport")</text>
}

@if (!Html.FeatureEnabled(PerformanceFeature.PerformanceA) || HttpContext.Current.IsDebuggingEnabled)
{
	@Html.Partial("_requireConfig")
}
else
{
	@Html.Partial("_requireConfigVersion")
}

require(['jquery', '_config'], function($, _config){
	// need jquery
	require([ 'utils.jquery_helpers', 'utils.helpers', 'fastclick', 'jquery_ba-dotimeout'], function(){
		// DomReady
		$(function(){

			// -----------------------------------------------------
			// --------------- User Events -------------------------
			// -----------------------------------------------------

			var $body = $('body');


			//----------------- Listener for focus, change, blur, checkValidation -------------------------------------


			// Jedes Input(ausgenommen type="submit"), texarea und select feuert ein Event "checkValidation" wenn focus, change oder blur getriggert wird.
			$body.on(   'blur ' +
				'change ' +
				'focus ' +
				'checkValidation', 'form[data-jmname="form"]', jmHF.eventDelegationTrigger);
			// Change-Listener für select, input[type="radio"] und input[type="checkbox"] zur initialisierung und Aufruf der change-Funktion des Plugins
			$body.on('change',  'select[data-jmname], ' +
				'input[type="radio"][data-jmname], ' +
				'input[type="checkbox"][data-jmname], ' +
				'input[type="text"][data-jmname], ' +
				'input[type="email"][data-jmname]', jmHF.eventDelegationTrigger);



			//---------------------------------------------------------------------------------------------------------





			//----------------------------- Listener for click --------------------------------------------------------

			$body.on('click', 'a[data-jmname]', jmHF.eventDelegationTriggerForATags);
			// Click-Listener für Selbstschließende-Tags oder nur Text-Knoten beinhaltende Tags wie h3, input und button mit Attribut [data-jmelement] zur initialisierung und Aufruf der click-Funktion des Plugins
			// Click-Listener für Kontainer-Tags mit Attribut [data-jmelement] wie div, tr, li, ul select zur initialisierung und Aufruf der click-Funktion des Plugins
			$body.on('click',   'button[type="submit"][data-jmname], ' +
				'div[data-jmname],' +
				'h3[data-jmname], ' +
				'input[type="submit"][data-jmname], ' +
				'input[type="button"][data-jmname], ' +
				'input[type="text"][data-jmname], ' +
				'input[type="checkbox"][data-jmname], ' +
				'li[data-jmname], ' +
				'select[data-jmname]' +
				'tr[data-jmname], ' +
				'ul[data-jmname]', jmHF.eventDelegationTrigger);

			$body.on('click', 'label[data-jmname]', jmHF.eventDelegationTriggerForLabels);


			// Browser-Back-Button -> somit wird ein Spinner auf der Seite zuvor (Klick auf Link oder Submit-Button) gelöscht. Der Spinner dient zu besseren UX
			/*window.addEventListener("popstate", function(){
				$('#linkspinner').remove();
			});*/










			// -----------------------------------------------------
			// --------------- generische Events -------------------
			// -----------------------------------------------------



			$body.on('dominit', '[data-jmname]', jmHF.eventDelegationTrigger);

			// Change-Listener für select, input[type="radio"] und input[type="checkbox"] zur initialisierung und Aufruf der change-Funktion des Plugins
			$body.on('jmtrigger', '[data-jmname]', jmHF.eventDelegationTrigger);









			// -----------------------------------------------------
			// -------- ausführen von Domready-Funktionen ----------
			// -----------------------------------------------------

			// läde die auf der Seite benötigten JS-Module
			$body.requirementsForJmElements();

			// Initialisiert die Elemente, die mit dem Attribut data-jmdominit="true" versehen sind
			$body.triggerSelfexecObj();

			// Prüft die URL auf evtl. Variablen und für dann die entsprechende Funktionalität aus
			/*jmHF.applyUrlVars('scrollToId');
			jmHF.applyUrlVars('scrollToAreaEdit');
			jmHF.applyUrlVars('scrollToTBopenId');*/

			// Externe Lib. Sie wird verwendet, um ein delay von 300ms bei Klick auf Touch-Devices zu unterdrücken.
			// Die Verzögerung entsteht durch das warte des Device auf einen evtl. doppleClick, der ein Zoomen in die Seite auslöst.
			// Touchstart -> Klick
			//FastClick.attach(document.body);

			// Führt die im DomReadyObject hinterlegten Funktionen aus

			execDomReadyObject();


			// Trigger Picturefill um die entsprechenden Images in die Div-Container zu injecten
			picturefill();

			if(window.debug){
				jmHF.checkJmNameElementenOnNecessaryDominitAttribut();
			}

			//jmHF.replaceSVGForOldBrowser();


			/*$(window).on('resize', function(){
				$.doTimeout('resize', 500, function () {
					$body.triggerSelfexecObj();
				});

			});*/

			// (function (d, s, id) {
			//     var js, fjs = d.getElementsByTagName(s)[0];
			//     if (d.getElementById(id)) return;
			//     js = d.createElement(s); js.id = id;
			//     js.src = "//connect.facebook.net/de_DE/all.js#xfbml=1&appId=" + window.FBID;
			//     fjs.parentNode.insertBefore(js, fjs);
			// }(document, 'script', 'facebook-jssdk'));

			/*(function () {
				var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
				ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();*/




		});
	});
});
