<!DOCTYPE html>
<html lang="de">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Site.SiteTitle | @Page.Title</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
    <link type="image/x-icon" href="/favicon.ico" />
    <script>
        window.UseLocalStorage = false;
        window.loadUnminifyVersion = true;
        window.IsDevServer = true;
    </script>
    <script>
        /*window.IsDevServer = false;
        var checkDebugging = function(){
            try{
                if(localStorage.getItem('debugging') !== null){
                    window.UseLocalStorage = false;
                    window.loadUnminifyVersion = true;
                }else{
                    window.UseLocalStorage = true;
                    window.loadUnminifyVersion = false;
                }
            }catch(e){
                window.UseLocalStorage = true;
                window.loadUnminifyVersion = false;
            }
        };
        checkDebugging();*/
    </script>
    <script>
        if (window.UseLocalStorage && window.loadUnminifyVersion) {
            console.warn('-------------!!!!!-----localStorage wird nicht gelöscht!------!!!!!-----');
        }

        // Das Objekt dient zum vorhalten von Funktionen, die unmittelbar nach dem ready-Event von jQuery ausgeführt werden sollen
        window.domReadyObject = {
            countProperties: function () {
                var count = 0;
                for (var property in this) {
                    if (this.hasOwnProperty(property)) {
                        count += 1;
                    }
                }
                return count;
            }
        };

        // Die übergebenen Funktion wird entweder unmittelbar ausgeführt, wenn jQuery geladen und das 'ready'-Event geschmissen wurde, oder im domReadyObject vorgehalten.
        window.onDomOrAjaxReady = function (p_function) {
            if (typeof jQuery !== 'undefined') {
                ($.isReady) ? p_function() : $(document).on('ready', p_function);
            } else {
                window.domReadyObject['func_' + window.domReadyObject.countProperties()] = p_function;
            }
        };

        // Hier werden alle vorgehaltenen Funktionen im domReadyObject ausgeführt
        window.execDomReadyObject = function () {
            for (var property in window.domReadyObject) {
                if (window.domReadyObject.hasOwnProperty(property) && ('countProperties' !== property)) {
                    window.domReadyObject[property]();
                }
            }
        };

        // Modernizr-Test auf localStorage
        window.testLocalStorage = function () {
            var mod = 'modernizr';
            try {
                localStorage.setItem(mod, mod);
                localStorage.removeItem(mod);
                return true;
            } catch (e) {
                return false;
            }
        };

        // Die Funktion prüft, ob es im localStorage schon einen identischen key (jeweils ohne versionierungsnummer) gibt und löscht diese incl. value im localStorage.
        window.clearLocalStorageForKey = function (p_key) {
            var keyWithoutExtension = p_key.substr(0, p_key.lastIndexOf('.'));
            var nonversionkey = keyWithoutExtension.substr(0, keyWithoutExtension.lastIndexOf('.'));
            var patt = new RegExp(nonversionkey);
            var index = 0;
            var length = localStorage.length;
            try {
                for (; index <= length; index++) {
                    if (patt.test(localStorage.key(index)) && (localStorage.key(index) !== p_key)) {
                        localStorage.removeItem(localStorage.key(index));
                    }
                }
            } catch (e) {
            }
        };

        // Fügt das CSS zum DOM entweder als link-Element oder aus dem localStorage
        window.addCSSToDOM = function (p_src) {
            var linkElem;
            var styleElem;
            // wenn localStorage vorliegt aber der Datei-Pfade(key) und entsprechen die value nicht vorhanden ist.
            // -> dynamische Erstellung eines link-tags mit Angabe des Datei-Pfades und anschließender ajax nach Dom-Ready um den Conten im localStorage abzulengen (kommt aus dem Cache).
            if (window.UseLocalStorage && testLocalStorage() && (localStorage[p_src] === undefined)) {
                // window.localStorage is available!
                linkElem = document.createElement('link');
                linkElem.setAttribute('rel', 'stylesheet');
                linkElem.setAttribute('href', p_src);
                document.getElementsByTagName('head')[0].appendChild(linkElem);
                onDomOrAjaxReady(function () {
                    (function () {
                        var xhr;
                        xhr = new XMLHttpRequest();
                        xhr.open('GET', p_src, true);
                        xhr.send();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4 && xhr.status !== 404 && xhr.responseText !== '') {
                                clearLocalStorageForKey(p_src);
                                localStorage[p_src] = xhr.responseText;
                            }
                        };
                    })()
                });
                // wenn localStorage vorliegt und der Datei-Pfade(key) und entsprecher value im localStorage vorhanden ist.
                // -> dynamische Erstellung eines style-tags mit injection der value aus dem localStorage.
            } else if (window.UseLocalStorage && testLocalStorage() && (localStorage[p_src] !== undefined)) {
                styleElem = document.createElement('style');
                styleElem.appendChild(document.createTextNode(localStorage[p_src]));
                document.getElementsByTagName('head')[0].appendChild(styleElem);
                // wenn kein localStorage vorliegt
                // -> dynamische Erstellung eines link-tags mit Angabe des Datei-Pfades
            } else {
                linkElem = document.createElement('link');
                linkElem.setAttribute('rel', 'stylesheet');
                linkElem.setAttribute('href', p_src);
                document.getElementsByTagName('head')[0].appendChild(linkElem);
            }
        };

        // Fügt das JS zum DOM entweder als link-Element oder aus dem localStorage
        window.addJSToDOM = function (p_src, p_attrkey, p_attrval) {
            var scriptElem;
            // wenn localStorage vorliegt aber der Datei-Pfade(key) und entsprechen die value nicht vorhanden ist.
            // -> dynamische Erstellung eines script-tags mit Angabe des Datei-Pfades und anschließender ajax nach Dom-Ready um den Conten im localStorage abzulengen (kommt aus dem Cache).
            if (window.UseLocalStorage && testLocalStorage() && (typeof localStorage[p_src] === 'undefined')) {
                // window.localStorage is available!
                scriptElem = document.createElement('script');
                scriptElem.setAttribute('src', p_src);
                if (typeof p_attrkey !== 'undefined') {
                    scriptElem.setAttribute(p_attrkey, p_attrval);
                }
                scriptElem.async = false;
                document.getElementsByTagName('head')[0].appendChild(scriptElem);
                onDomOrAjaxReady(function () {
                    (function () {
                        var xhr;
                        xhr = new XMLHttpRequest();
                        xhr.open('GET', p_src, true);
                        xhr.send();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4 && xhr.status !== 404 && xhr.responseText !== '') {
                                clearLocalStorageForKey(p_src);
                                localStorage[p_src] = xhr.responseText;
                            }
                        };
                    })()
                });
                // wenn localStorage vorliegt und der Datei-Pfade(key) und entsprecher value im localStorage vorhanden ist.
                // -> dynamische Erstellung eines style-tags mit injection der value aus dem localStorage.
            } else if (window.UseLocalStorage && testLocalStorage() && (typeof localStorage[p_src] !== 'undefined')) {
                scriptElem = document.createElement('script');
                if (typeof p_attrkey !== 'undefined') {
                    scriptElem.setAttribute(p_attrkey, p_attrval);
                }
                scriptElem.text = localStorage[p_src];
                document.getElementsByTagName('head')[0].appendChild(scriptElem);
                // wenn kein localStorage vorliegt
                // -> dynamische Erstellung eines link-tags mit Angabe des Datei-Pfades
            } else {
                scriptElem = document.createElement('script');
                scriptElem.setAttribute('src', p_src);
                if (typeof p_attrkey !== 'undefined') {
                    scriptElem.setAttribute(p_attrkey, p_attrval);
                }
                scriptElem.async = false;
                document.getElementsByTagName('head')[0].appendChild(scriptElem);
            }
        };

        window.checkLocalStorageByTimestamp = function () {
            if (window.UseLocalStorage && testLocalStorage()) {
                try {
                    // wenn kein timestamp im localStorage vorhanden ist wird einer erstellt.
                    if (localStorage.getItem('timestamp') === null) {
                        localStorage['timestamp'] = new Date().getTime().toString();
                    } else {
                        // wenn der timestamp im localStorage kleiner ist als der fest codierte Timestamp, wird wird der localStorage gelöscht.
                        if (parseInt(localStorage['timestamp'], 10) < 1402389706108) { // Nicht Ändern!!!! So wird bei allen Clients der localStorage gelöscht!!!! Nur Ändern, wenn sich die Datei-Pfad in der main.js zu den Modulen ändern Bsp. require.config({  paths:{ 'jmButtonForAddClassOnRelatedElem': 'mylibs/AMD-Plugins/jmButtonForAddClassOnRelatedElem',......
                            window.localStorage.clear();
                        }
                    }
                } catch (e) {
                }
            }
        };

        checkLocalStorageByTimestamp();
    </script>
    <script>
        if (window.loadUnminifyVersion) {
            addJSToDOM('/js/externals/customized/modernizr.custom.js');
            addJSToDOM('/js/externals/originalReferenceSource/matchmedia.js');
            addJSToDOM('/js/externals/originalReferenceSource/picturefill.js');
            addCSSToDOM('/css/style.css');
            addCSSToDOM('/css/ayyildiz.css');
            addJSToDOM('/js/externals/customized/require.2.1.11.js', 'data-main', '/js/main.js');
        } else {
            addJSToDOM('/js/build/externals/customized/modernizr.custom.6966b8.js');
            addJSToDOM('/js/build/externals/originalReferenceSource/matchmedia.05942b.js');
            addJSToDOM('/js/build/externals/originalReferenceSource/picturefill.40a9ae.js');
            addJSToDOM('/js/build/externals/customized/require.2.1.11.fce06e.js', 'data-main', '/js/build/main.82821d.js');
            addCSSToDOM('/css/min/style.729c8a.css');
        }
    </script>
    <noscript>

        <link rel="stylesheet" href="/css/style.css" />

        <!--<link rel="stylesheet" href="/css/min/style.729c8a.css" />-->

        <link rel="stylesheet" href="/css/noscript.css" />
    </noscript>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @UI.Head()
	@RenderSection("head", required: false)
</head>
<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<a class="navbar-brand" href="/">
					<img id="brand-jm" src="/Content/img/joinmedia.png" alt="join.media" /></a>
			</div>
			<div class="navbar-collapse collapse">
					@UI.Menu(StopLevel: 3, CssClass:"nav navbar-nav")
				@Html.Partial("_LoginPartial")
			</div>
		</div>
	</div>
	<div class="container body-content">
		
		<div>
			<h4>JS Features:</h4>
			@JSFeatures.AssetsConditionalLoading: @Html.FeatureEnabled(JSFeatures.AssetsConditionalLoading)<br/>
			@JSFeatures.AssetsOptimisation: @Html.FeatureEnabled(JSFeatures.AssetsOptimisation)<br/>
			@JSFeatures.BrowserPerformance: @Html.FeatureEnabled(JSFeatures.BrowserPerformance)<br/>
			@JSFeatures.CDN: @Html.FeatureEnabled(JSFeatures.CDN)<br/>
			@JSFeatures.ExpireHeaders: @Html.FeatureEnabled(JSFeatures.ExpireHeaders)<br/>
			@JSFeatures.ImageFormats: @Html.FeatureEnabled(JSFeatures.ImageFormats)<br/>
			@JSFeatures.ImageResponsive: @Html.FeatureEnabled(JSFeatures.ImageResponsive)<br/>
			@JSFeatures.LocalStorage: @Html.FeatureEnabled(JSFeatures.LocalStorage)<br/>
			@JSFeatures.NoJS: @Html.FeatureEnabled(JSFeatures.NoJS)<br/>
			@JSFeatures.ProgressiveEnhancement: @Html.FeatureEnabled(JSFeatures.ProgressiveEnhancement)<br/>
			@JSFeatures.RequireJS: @Html.FeatureEnabled(JSFeatures.RequireJS)<br/>
			@JSFeatures.TouchSupport: @Html.FeatureEnabled(JSFeatures.TouchSupport)<br/>
			
			
			<h4>Css Features:</h4>
			@CssFeatures.Aria: @Html.FeatureEnabled(CssFeatures.Aria)<br/>
			@CssFeatures.CSS3_Animations: @Html.FeatureEnabled(CssFeatures.CSS3_Animations)<br/>
			@CssFeatures.FlexibleGrids: @Html.FeatureEnabled(CssFeatures.FlexibleGrids)<br/>
			@CssFeatures.FlexibleImages: @Html.FeatureEnabled(CssFeatures.FlexibleImages)<br/>
			@CssFeatures.HTML5_Apis: @Html.FeatureEnabled(CssFeatures.HTML5_Apis)<br/>
			@CssFeatures.HTML5_Semantics: @Html.FeatureEnabled(CssFeatures.HTML5_Semantics)<br/>
			@CssFeatures.MicroData: @Html.FeatureEnabled(CssFeatures.MicroData)<br/>
			@CssFeatures.MicroFormats: @Html.FeatureEnabled(CssFeatures.MicroFormats)<br/>
			@CssFeatures.Prefetching: @Html.FeatureEnabled(CssFeatures.Prefetching)<br/>
			@CssFeatures.UIBehaviour: @Html.FeatureEnabled(CssFeatures.UIBehaviour)<br/>
			@CssFeatures.WebFonts: @Html.FeatureEnabled(CssFeatures.WebFonts)
		</div>

		@RenderBody()
		<hr />
		<footer>
			<p>&copy; @DateTime.Now.Year - Meine ASP.NET-Anwendung</p>
		</footer>
	</div>
	@Scripts.Render("~/jm/jquery")
	@Scripts.Render("~/jm/bootstrap")
	@RenderSection("scripts", required: false)
</body>
</html>
