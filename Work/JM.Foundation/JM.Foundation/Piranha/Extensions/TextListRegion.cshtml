@using System.Web.Mvc.Html
@using JM.Foundation.Mvc.Helper
@using Piranha.Extend.Regions
@model TextListRegion

@{
    //i wird für Arrayindex benutzt
    var i = 0;
    //j wird als Idenfifier benutzt
    var j = 1;
	string regionID = "0";
	string fieldString = "";

	if (Model.TextList == null)
	{
		Model.TextList = new List<TextRegion>();
	}
	fieldString = @Html.GetFullHtmlFieldName(m => m.TextList.FirstOrDefault().Title);
	regionID = fieldString.Replace("Regions[", "").Split(']')[0];
}

<script>
    // Floatpanels für Editoren wieder entfernen
    $(document).ready(function() {
        if(tinyMCE.editors.length > 1){
            $(window).unbind('scroll');
        }
    });

    var tabID_@regionID = @Model.TextList.Count;
    var tabIndex_@regionID = @Model.TextList.Count;

    function @String.Format("addTab_{0}()", regionID) 
    {
        var id = tabID_@regionID + 1;
        var index = tabIndex_@regionID;
        var regionid= "@regionID";
        $("#addTab_" + regionid).before("<li class='tab_"  + regionid+ "_" + id + "'><label>Inhalt:</label><div class='input'><textarea rows='8' class='editor' name='Regions["+ regionid +"].Body.TextList[" + index + "].Body' id='TabContent_" + regionid+ "_"  + id + "' cols='20'></textarea></div></li><li class='tab_" + regionid+ "_"  + id + "'><a class='btn' data-remove-id='" + id + "' onclick='removeTab_"+regionid+"(" + id + ")';'>Textfeld entfernen</a></li>");
        tinymce.EditorManager.execCommand('mceAddEditor', true, 'TabContent_' + regionid+ "_"  + id);
        tabID_@regionID++;
        tabIndex_@regionID++;
    }

    function @String.Format("removeTab_{0}(id)", regionID) 
    {
        var regionid= "@regionID";
        $(".tab_" + regionid + "_" + id).remove();
        var countIndex = 0;
        for(var f = 0; f < tabID_@regionID; f++){

            var idtochange = f + 1;
            var inputID = "#TabTitle_" + regionid + "_" + idtochange;
            var textAreaID = "#TabContent_" + regionid + "_" + idtochange;
            
            if($(inputID).length && $(textAreaID).length)
            {
                $(inputID).attr("name", "Regions["+ regionid +"].Body.TextList[" + countIndex + "].Title");
                $(inputID).attr("data-index", countIndex);
                $(textAreaID).attr("name", "Regions["+ regionid +"].Body.TextList[" + countIndex + "].Body");
                $(textAreaID).attr("data-index", countIndex);
                countIndex++;
            }
        }
        tabIndex_@regionID--;
    }
</script>
<ul class="form">
    @foreach(var tab in Model.TextList)
    {
        <li class="@String.Format("tab_{0}_{1}", regionID, j)">
            <label>Inhalt:</label> 
	        <div class="input">
		        @Html.TextAreaFor(m => m.TextList[i].Body, new { data_index= i, id = String.Format("TabContent_{0}_{1}", regionID, j), rows=8, cols=20, @class="editor"})
	        </div>
        </li>
        <li class="@String.Format("tab_{0}_{1}", regionID, j)"><a class="btn" onclick="@String.Format("removeTab_{0}({1});", regionID, j)">Textfeld entfernen</a></li>
        i++;
        j++;
    }
    <li id="@String.Format("addTab_{0}", regionID)"><a class="btn" onclick="@String.Format("addTab_{0}();", regionID)">Neues Textfeld hinzufügen</a></li>
</ul>